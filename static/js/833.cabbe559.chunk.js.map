{"version":3,"file":"static/js/833.cabbe559.chunk.js","mappings":"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","sources":["Pages/HomePage.styled.js","components/HeaderDashboard/HeaderDashboard.styled.jsx","components/HeaderDashboard/HeaderDashboard.jsx","Pages/ScreensPage.styled.js","redux/columns/selectors.js","components/ColumnModal/ColumnModal.styled.js","components/ColumnModal/AddColumnModal/AddColumnModal.jsx","components/ColumnModal/EditColumnModal/EditColumnModal.jsx","components/Button/AddColumnButton.styled.jsx","components/Button/Button.jsx","components/Button/AddColumnButton.jsx","components/ColumnList/ColumnList.styled.js","components/ColumnListItem/ColumnListItem.styled.js","components/ColumnListItem/ColumnListItem.jsx","components/ColumnList/ColumnList.jsx","Pages/ScreensPage.jsx","redux/boards/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const HomeWrapper = styled.div`\n  min-height: 100vh;\n  width: 320px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n\n  @media screen and (min-width: 768px) {\n   width: 768px;\n\n  }\n\n  @media screen and (min-width: 1440px) {\n width: 1180px;\n  }\n`;\n\nexport const Text = styled.p`\n  margin: 258px 20px 0;\n  font-size: 12px;\n  line-height: 1.3;\n  letter-spacing: -0.02em;\n  text-align: center;\n  color: rgba(22, 22, 22, 0.7);\n\n  @media only screen and (min-width: 375px) and (max-width: 768px) {\n    margin: 258px auto 0;\n    max-width: 335px;\n  }\n  @media only screen and (min-width: 768px) {\n    margin: 368px auto 0;\n    max-width: 486px;\n    font-size: 14px;\n  }\n  @media only screen and (min-width: 1440px) {\n    margin: 247px auto 0; \n    /* margin-right: 347px;     */\n  }\n`;\n\nexport const ButtonText = styled.button`\n  padding: 0;\n  font-size: 12px;\n  border: none;\n  background-color: inherit;\n  color: ${p => p.theme.violetColors.accentColor};\n\n  @media only screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const HeaderWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const Icon = styled.svg`\n  width: 18px;\n  height: 18px;\n  fill: red;\n  color: red;\n  transition: all 250ms linear;\n  fill: transparent;\n`;\n\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: start;\n`;\n\nexport const SectionTitle = styled.h2`\n  font-size: 18px;\n  font-family: 'Poppins';\n  font-weight: 500;\n  letter-spacing: -0.36px;\n  margin-bottom: 14px;\n`;\n\nexport const FormWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: start;\n\n  margin-bottom: 24px;\n\n  &:first-of-type {\n    padding-top: 14px;\n    padding-bottom: 14px;\n  }\n\n  &:last-of-type {\n    position: relative;\n    margin-bottom: 0;\n  }\n`;\n\nexport const FormTitle = styled.h3`\n  font-size: 14px;\n  font-family: 'Poppins';\n  font-weight: 500;\n  letter-spacing: -0.28px;\n  margin-bottom: 14px;\n`;\n\nexport const BgWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 252px;\n  gap: 4px;\n`;\n\nexport const BgItem = styled.div`\n  border-radius: 8px;\n  border: none;\n  outline: none;\n  width: 28px;\n  height: 28px;\n\n  background-position: center;\n  background-size: contain;\n\n  cursor: pointer;\n  transition: all 250ms linear;\n\n  &.active {\n    scale: 1.1;\n  }\n`;\n\nexport const CustomRadioBtn = styled.div`\n  border-radius: 8px;\n  width: 28px;\n  height: 28px;\n\n  background-position: center;\n  background-size: cover;\n\n  cursor: pointer;\n\n  transition: all 250ms linear;\n\n  &.active {\n    scale: 1.1;\n  }\n`;\n\nexport const DefaultRadioBtn = styled(Field)`\n  appearance: none;\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n\n  white-space: nowrap;\n  clip-path: inset(100%);\n  clip: rect(0 0 0 0);\n  overflow: hidden;\n`;\n\nexport const ShowAllLabel = styled.p`\n  font-size: 12px;\n  font-family: Poppins;\n  letter-spacing: -0.24px;\n  text-decoration-line: underline;\n  cursor: pointer;\n\n  position: absolute;\n  top: 2px;\n  right: 0;\n`;\n\nexport const RadioBtnWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: stretch;\n  gap: 12px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 16px;\n  height: 14px;\n  border-radius: 14px;\n\n  cursor: pointer;\n`;\n\nexport const LabelItem = styled.div`\n  width: 14px;\n  height: 14px;\n  border-radius: 14px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  transition: all 250ms linear;\n\n  &.active {\n    width: 6px;\n    height: 6px;\n  }\n`;\n\nexport const LabetlText = styled.p`\n  display: block;\n  width: 100%;\n\n  font-size: 12px;\n  font-family: Poppins;\n  letter-spacing: -0.24px;\n\n  cursor: pointer;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nexport const ModalForm = styled(Form)`\n  margin: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FilterSVG = styled.svg`\n  fill: rgba(22, 22, 22, 0.8);\n  opacity: 0.4;\n  cursor: pointer;\n\n  width: 18px;\n  height: 18px;\n  &:hover,\n  &:focus {\n    opacity: 1;\n  }\n`;\n","import sprite from '../../images/icons.svg';\nimport { useState } from 'react';\nimport {\n  // DefaultRadioBtn,\n  FilterSVG,\n  // Icon,\n  // Label,\n  // LabelItem,\n  // LabetlText,\n  // RadioBtnWrapper,\n  // Wrapper,\n} from './HeaderDashboard.styled';\nimport { Field, Form, Formik } from 'formik';\nimport Modal from 'react-modal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showAll, togglePriority } from 'redux/project/projectSlice';\nconst options = ['without', 'low', 'medium', 'high'];\n\nexport const HeaderDashboard = () => {\n  const dispatch = useDispatch();\n  const projectName = useSelector(state => state.project.projectName);\n  const filtersPriority = useSelector(state => state.project.filtersPriority);\n  // togglePriority;\n  const [open, setOpen] = useState(false);\n  // const [selectedLabel, setSelectedLabel] = useState('');\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  // імпортувати назву проекта\n  const customStyles = {\n    content: {\n      width: '300px',\n      heihght: '234px',\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: '#121212',\n    },\n  };\n\n  const initialValues = {\n    label: filtersPriority,\n  };\n\n  const isCheked = value => {\n    return filtersPriority.includes(value);\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <h3>{projectName}</h3>\n      <button\n        onClick={handleOpen}\n        style={{\n          position: 'absolute',\n          top: '14px',\n          right: '24px',\n          display: 'flex',\n          gap: '8px',\n          background: 'none',\n          border: 'none',\n        }}\n      >\n        <FilterSVG>\n          <use xlinkHref={`${sprite}#icon-filter`}></use>\n        </FilterSVG>\n        <span>Filter</span>\n      </button>\n      <Modal\n        isOpen={open}\n        onRequestClose={handleClose}\n        style={customStyles}\n        appElement={document.getElementById('root')}\n      >\n        <div\n          style={{\n            position: 'relative',\n            padding: '24px',\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <button\n            onClick={handleClose}\n            style={{ position: 'absolute', top: '14px', right: '14px' }}\n          >\n            X\n          </button>\n          <div style={{ color: 'white' }}>\n            <h4\n              style={{ borderBottom: '1px solid white', paddingBottom: '14px' }}\n            >\n              Filters\n            </h4>\n            <div\n              style={{\n                margin: '14px 0',\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n              }}\n            >\n              <span>Label color</span>\n              <button onClick={() => dispatch(showAll())}>Show all</button>\n            </div>\n            <Formik initialValues={initialValues}>\n              <Form>\n                {options.map((el, idx) => (\n                  <div key={idx}>\n                    <label>\n                      <Field\n                        type=\"checkbox\"\n                        checked={isCheked(el)}\n                        name=\"options\"\n                        onChange={e => dispatch(togglePriority(e.target.value))}\n                        value={el}\n                      />\n                      {el}\n                    </label>\n                  </div>\n                ))}\n              </Form>\n            </Formik>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default HeaderDashboard;\n","import styled from \"styled-components\";\n\nexport const ScreensPageWrapper = styled.div`\n  background-color: ${p=>p.theme.violetColors.violetFill};\n  /* width: 100%; */\n  height: 100vh;\n  display:flex;\n  flex-direction: column;\n\n  /* @media only screen and (min-width: 768px) {\n     width: 758px;\n  }\n\n  @media only screen and (min-width: 1440px) {\n     width :768px;\n  } */\n`;\n","export const selectColumns = state => state.columns.columns;\nexport const selectIsLoading = state => state.columns.isLoading;\nexport const selectError = state => state.columns.error;\nexport const selectBoardId =state => state.columns.board;\n","import styled from 'styled-components';\n\nexport const ModalCloseButton = styled.button`\n  position: absolute;\n  top: 14px;\n  right: 14px;\n  width: 18px;\n  height: 18px;\n  border-color: transparent;\n  background-color: #fcfcfc;\n  transition: stroke 0.3s;\n`;\nexport const StyledSvgClose = styled.svg`\n  fill: ${props => props.theme.colors.darkTextColor};\n  stroke: ${props => props.theme.colors.darkTextColor};\n  display: flex;\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n  width: 12px;\n  height: 12px;\n  top: 50%;\n  right: 50%;\n  transform: translate(50%, -50%);\n  border: none;\n  transition: background-color 0.3s ease;\n`;\n","import React from 'react';\nimport Modal from 'react-modal';\nimport sprite from '../../../images/icons.svg';\nimport '../ColumnModal.css';\nimport { ModalCloseButton, StyledSvgClose } from '../ColumnModal.styled';\n\n\n// Modal.setAppElement('#root');\n\n// const stylesModal = {\n//   position: 'relative',\n//   width: '100%',\n//   height: 'fit-content',\n//   maxHeight: '433px',\n//   maxWidth: '350px',\n//   // backgroundColor: ${props => props.theme.colors.white},\n//   // border-radius: '8px'\n//   // box-shadow: '0px 4px 16px 0px' ${props => props.theme.colors.greyIconColor};\n//   // transition: transform 0.3s;\n// }\n\nexport const AddColumnModal = ({ isOpen, onClose, submitButton, children }) => {\n  \n  return (\n    <Modal\n      isOpen={isOpen}\n      overlayClassName={'modal-overlay'}\n      // style={stylesModal}\n      className={'modal-content'}\n      closeTimeoutMS={300}\n      onRequestClose={() => onClose()}\n      ariaHideApp={false}\n    >\n\n   <ModalCloseButton onClick={() => onClose()}>\n          <StyledSvgClose>\n            <use xlinkHref={`${sprite}#icon-x-close`}></use>\n          </StyledSvgClose>\n         \n        </ModalCloseButton>\n        {children}\n     \n      </Modal>\n    \n  );\n};\n","import React from 'react';\nimport Modal from 'react-modal';\nimport sprite from '../../../images/icons.svg';\nimport '../ColumnModal.css';\nimport { ModalCloseButton, StyledSvgClose } from '../ColumnModal.styled';\n// import { ModalCloseButton, StyledSvgClose } from '../ColumnModal.styled';\n\n// Modal.setAppElement('#root');\n\nconst stylesModal = {\n  position: 'relative',\n  width: '100%',\n  height: 'fit-content',\n  maxHeight: '433px',\n  maxWidth: '350px',\n  // backgroundColor: ${props => props.theme.colors.white},\n  // border-radius: '8px'\n  // box-shadow: '0px 4px 16px 0px' ${props => props.theme.colors.greyIconColor};\n  // transition: transform 0.3s;\n}\n\nexport const EditColumnModal = ({\n  isOpen,\n  onClose,\n  submitButton,\n  children,\n}) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      overlayClassName={'modal-overlay'}\n      // className={'modal-content'}\n      style={stylesModal}\n      closeTimeoutMS={300}\n      onRequestClose={() => onClose()}\n      ariaHideApp={false}\n    >\n     <ModalCloseButton onClick={() => onClose()}>\n        <StyledSvgClose>\n          <use xlinkHref={`${sprite}#icon-x-close`}></use>\n        </StyledSvgClose>\n      \n      </ModalCloseButton>\n      {children}\n     \n    </Modal>\n  );\n};\n","import styled from 'styled-components';\nimport { Button } from './Button';\n\n// export const Main = styled.main`\n//   width: 100%;\n//   min-height: 100vh;\n// `;\n\n// export const Section = styled.section`\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   align-items: center;\n//   width: 100%;\n//   min-height: 100vh;\n// `;\n\nexport const ModalShowButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  width: 334px;\n  height: 56px;\n  gap: 8px;\n  padding: 14px 0;\n  margin-bottom: 24px;\n  font-family: Poppins;\n  font-size: 14px;\n  letter-spacing: -0.32px;\n  background-color: ${props => props.theme.colors.white};\n  color: ${props => props.theme.colors.darkTextColor};\n  border-radius: ${props => props.theme.radius.m};\n  border-color: ${props => props.theme.colors.white};\n  filter: drop-shadow(0 0 7px rgba(22, 22, 22, 0.08));\n  transition: background-color 0.3s;\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nexport const AddColumnTitle = styled.p`\n  color: ${props => props.theme.colors.darkTextColor};\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.32px;\n  margin-bottom: 24px;\n`;\n\nexport const AddColumnInput = styled.input`\n  display: block;\n  width: 251px;\n  height: 21px;\n  padding: 14px 18px;\n  margin-bottom: 24px;\n  margin-top: 24px;\n  opacity: 0.4;\n  border-radius: ${props => props.theme.radius.m};\n  border: 1px solid ${props => props.theme.violetColors.accentColor};\n  box-shadow: 0 4px 16px 0 ${props => props.theme.colors.shadowColor};\n  background-color: transparent;\n  color: ${props => props.theme.colors.darkTextColor};\n  letter-spacing: -0.32px;\n  &:focus {\n    opacity: 1;\n    outline: 1px solid ${props => props.theme.violetColors.accentColor};\n  }\n  @media screen and (min-width: 768px) {\n    width: 266px;\n  }\n`;\n\nexport const AddColumnBtn = styled(Button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: Poppins;\n  font-size: 14px;\n  letter-spacing: -0.32px;\n  gap: 8px;\n  width: 100%;\n  width: 287px;\n  height: 49px;\n\n  padding: 10px 0;\n  background-color: ${props => props.theme.violetColors.accentColor};\n  color: ${props => props.theme.colors.white};\n  border-radius: 8px;\n  border-color: transparent;\n\n  &:hover {\n    background-color: ${props => props.theme.violetColors.hoverViolet};\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 302px;\n  }\n`;\n\nexport const IconWhiteWrap = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  background-color: ${props => props.theme.colors.white};\n  border-radius: ${props => props.theme.radius.m};\n`;\n\nexport const IconVioletWrap = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  background-color: ${props => props.theme.violetColors.hoverViolet};\n  border-radius: ${props => props.theme.radius.m};\n`;\n\nexport const StyledSvgWhitePlus = styled.svg`\n  fill: ${props => props.theme.colors.white};\n  stroke: ${props => props.theme.colors.white};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 14px;\n  height: 14px;\n  border: none;\n`;\n\nexport const StyledSvgDarkPlus = styled.svg`\n  fill: ${props => props.theme.colors.darkTextColor};\n  stroke: ${props => props.theme.colors.darkTextColor};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 14px;\n  height: 14px;\n  border: none;\n`;\n","export const Button = ({\n    children,\n    type = 'click',\n    className,\n    handlerClick,\n    label,\n  }) => {\n    // Компонент кнопка, для зміни типу кнопки передаємо проп type=\"value\"-string\n    // якщо необхідно стилізувати кнопку, передаем компоненту <Button className={your style }></Button>\n  \n    return (\n      <button\n        type={type}\n        className={className}\n        onClick={handlerClick}\n        aria-label={label}\n      >\n        {children}\n      </button>\n    );\n  };","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n// import toast, { Toaster } from 'react-hot-toast';\nimport { AddColumnModal } from '../ColumnModal/AddColumnModal/AddColumnModal';\nimport { EditColumnModal } from '../ColumnModal/EditColumnModal/EditColumnModal';\nimport sprite from '../../images/icons.svg';\nimport {\n  addColumn,\n  // deleteColumn,\n  editColumn,\n} from '../../redux/columns/operations';\n\nimport {  \n  ModalShowButton,\n  AddColumnTitle,\n  AddColumnInput,\n  AddColumnBtn,\n  IconWhiteWrap,\n  IconVioletWrap,\n  StyledSvgWhitePlus,\n  StyledSvgDarkPlus,\n} from '../Button/AddColumnButton.styled';\nimport { useParams } from 'react-router-dom';\n\nexport const AddColumnButton = ({ columnId }) => {\n  const [modalAddColumnIsOpen, setModalAddColumnIsOpen] = useState(false);\n  const [modalEditColumnIsOpen, setModalEditColumnIsOpen] = useState(false);\n  const [editColumnValue, setEditColumnValue] = useState('');\n\n  const dispatch = useDispatch();\n  const {boardId} = useParams();\n  const handlerAddColumn = evt => {\n    evt.preventDefault();\n    const inputValue = evt.target.title.value.trim();\n    if (inputValue !== '') {\n      const newColumn = {\n        title: inputValue,\n        dashboardId:boardId\n      };\n     \n      dispatch(addColumn(newColumn));\n      setModalAddColumnIsOpen(false); \n      console.log(inputValue);\n      console.log(newColumn);\n      return;\n    }\n    return;\n  };\n\n  const handlerValue = ({ target }) => setEditColumnValue(target.value);\n\n  const handlerEditColumn = evt => {\n    evt.preventDefault();\n    const updatedTitle = evt.target.elements.title.value;\n\n    if (updatedTitle.trim() !== '') {\n      dispatch(editColumn({ id: columnId, title: updatedTitle }));\n      setModalEditColumnIsOpen(false);\n      return;\n    }\n    return;\n  };\n\n  // const handlerDeleteColumn = columnId => {\n  //   dispatch(deleteColumn(columnId));\n  // };\n\n  // export const handlerColumn = ({ column: { id, title, owner } }) => {\n  // const dispatch = useDispatch();\n  // const handlerEditColumn = (columnId, updatedData) => {\n  //   dispatch(editColumn({ id: columnId, ...updatedData }));\n  // };\n  // const handlerDeleteColumn = columnId => {\n  //   dispatch(deleteColumn(columnId));\n  // };\n\n  return (    \n      <>\n        <ModalShowButton\n          type=\"submit\"\n          onClick={() => setModalAddColumnIsOpen(true)}\n        >\n          <IconVioletWrap>\n            <StyledSvgWhitePlus>\n              <use xlinkHref={`${sprite}#icon-plus`}></use>\n            </StyledSvgWhitePlus>\n          </IconVioletWrap>\n          Add another column\n        </ModalShowButton>\n\n        <ModalShowButton onClick={() => setModalEditColumnIsOpen(true)}>\n          <IconVioletWrap>\n            <StyledSvgWhitePlus>\n              <use xlinkHref={`${sprite}#icon-plus`}></use>\n            </StyledSvgWhitePlus>\n          </IconVioletWrap>\n          Edit Column\n        </ModalShowButton>\n\n        <AddColumnModal\n          isOpen={modalAddColumnIsOpen}\n          onClose={() => setModalAddColumnIsOpen(false)}\n          submitButton=\"Add\"\n        >\n          <div>\n            <AddColumnTitle>Add column</AddColumnTitle>\n            <form onSubmit={handlerAddColumn}>\n              <AddColumnInput\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Title\"\n                autoFocus\n              />\n\n              <AddColumnBtn type=\"submit\">\n                <IconWhiteWrap>\n                  <StyledSvgDarkPlus>\n                    <use xlinkHref={`${sprite}#icon-plus`}></use>\n                  </StyledSvgDarkPlus>\n                </IconWhiteWrap>\n                Add\n              </AddColumnBtn>\n            </form>\n          </div>\n        </AddColumnModal>\n\n        <EditColumnModal\n          isOpen={modalEditColumnIsOpen}\n          onClose={() => setModalEditColumnIsOpen(false)}\n          submitButton=\"Add\"\n        >\n          <div>\n            <AddColumnTitle>Edit column</AddColumnTitle>\n            <form onSubmit={handlerEditColumn}>\n              <AddColumnInput\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"To Do\"\n                value={editColumnValue}\n                onChange={handlerValue}\n                autoFocus\n              />\n              <AddColumnBtn type=\"submit\">\n                <IconWhiteWrap>\n                  <StyledSvgDarkPlus>\n                    <use xlinkHref={`${sprite}#icon-plus`}></use>\n                  </StyledSvgDarkPlus>\n                </IconWhiteWrap>\n                Add\n              </AddColumnBtn>\n            </form>\n          </div>\n        </EditColumnModal>\n        </>      \n  );\n};\n","import styled from \"styled-components\";\nexport const ColumnListWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 30px;\n  margin-top: 46px;\n\n  @media only screen and (min-width: 768px) {\n        margin-top: 26px;    \n    };\n    @media only screen and (min-width: 1440px) {\n        margin-top: 10px;    \n    };\n\n    overflow-y: hidden;\n    overflow-x: auto;\n\n    &::-webkit-scrollbar {\n    width: 12px; /* Ширина скроллбару */    \n  }\n  &::-webkit-scrollbar-thumb {\n    background-color: ${p => p.theme.violetColors.lightViolet}; /* Колір скроллбару */\n    border-radius: ${p => p.theme.radius.l}; /* Округлення країв скроллбару */\n  }\n  \n  &::-webkit-scrollbar-track {\n    background-color: ${p => p.theme.colors.white}; /* Колір фону скроллбару */\n    border-radius: ${p => p.theme.radius.l};; \n  } \n`;\n\nexport const ColumnListStyled = styled.ul`\n    margin: 0 4px 60px 20px;\n    display: flex;\n    flex-direction: row;\n    gap: ${p=> p.theme.spacing(8.5)};\n\n    @media only screen and (min-width: 768px) {\n        margin: 0 4px 96px 32px    \n    };\n\n    @media only screen and (min-width: 1440px) {\n        margin: 0 4px 36px 24px    \n    };\n\n      /* overflow-y: hidden;\n      overflow-x: auto;\n\n      &::-webkit-scrollbar {\n      width: 12px; /* Ширина скроллбару */    \n      }\n    &::-webkit-scrollbar-thumb {\n      background-color: ${p => p.theme.violetColors.lightViolet}; /* Колір скроллбару */\n      border-radius: ${p => p.theme.radius.l}; /* Округлення країв скроллбару */\n      }\n    \n    &::-webkit-scrollbar-track {\n      background-color: ${p => p.theme.colors.white}; /* Колір фону скроллбару */\n      border-radius: ${p => p.theme.radius.l};; \n      }  */\n`;\n export const AddcolumnWrapper = styled.li`\n   \n `;\n","import styled from \"styled-components\";\n\nexport const ColumnWrapper = styled.div`\n  display:flex;\n  flex-direction: column;  \n`;\n\nexport const ColumnHeader = styled.div`\n  width: 335px;\n  display: flex;\n  flex-direction:row;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${p=>p.theme.spacing(4.5)} 0;\n  border-radius: ${p => p.theme.radius.m};  \n  background-color:  ${p => p.theme.colors.white}\n`;\n\nexport const ColumnTitle = styled.h3`\n  margin-left: ${p => p.theme.spacing(5)}; \n  font-size: 14px;\n  letter-spacing: -0.28px;\n`;\n\nexport const EditBlock = styled.div`\n  margin-right :${p => p.theme.spacing(5)} ;\n  display: flex;\n  flex-direction: row;\n  gap: ${p=>p.theme.spacing(2)} ;  \n`;\nexport const EditButton = styled.button`\n  display:flex;\n  align-items: center;\n  padding: 0;\n  background-color: transparent;\n  border: none;\n`;\n\nexport const EditSVG = styled.svg`\n   stroke: ${p => p.theme.colors.greyIconColor};\n  fill: ${p => p.theme.colors.white};  \n  width: 16px;\n  height: 16px;\n  &:hover,\n  &:focus {\n    stroke: ${p => p.theme.violetColors.accentColor};\n  }\n`;\n\n","\nimport sprite from '../../images/icons.svg';\n\nimport {\n  ColumnHeader,\n  ColumnTitle,\n  ColumnWrapper,\n  EditBlock,\n  EditButton,\n  EditSVG,\n} from './ColumnListItem.styled';\n\n\n\nexport const ColumnListItem = ({column: { _id, title}}) => {    \n  \n  \n  // const dispatch = useDispatch();\n  // const handlerEditColumn = (columnId, updatedData) => {\n  //   dispatch(editColumn({ id: columnId, ...updatedData }));\n  // };\n  // const handlerDeleteColumn = columnId => {\n  //   dispatch(deleteColumn(columnId));\n  // };\n    return(\n        <ColumnWrapper>\n         <ColumnHeader>\n         <ColumnTitle>{title}</ColumnTitle>\n          <EditBlock>\n            <EditButton type=\"button\" \n            // onClick={() => handlerEditColumn(id)}\n            >\n              <EditSVG>\n                <use xlinkHref={`${sprite}#icon-pencil-01`}/>\n              </EditSVG>\n            </EditButton>\n            <EditButton type=\"button\" \n            // onClick={() => handlerDeleteColumn(id)}\n            >\n              <EditSVG>\n                <use xlinkHref={`${sprite}#icon-trash-04`}/>\n              </EditSVG>\n            </EditButton>\n          </EditBlock>\n         </ColumnHeader>          \n            {/* <CardList columnId={_id}/> */}\n            {/* <ButtonAddCard/> */}\n        </ColumnWrapper>      \n      );\n\n// import {\n//   ColumnHeader,\n//   ColumnTitle,\n//   ColumnWrapper,\n//   EditBlock,\n//   EditButton,\n//   EditSVG,\n// } from './ColumnListItem.styled';\n\n// export const ColumnListItem = ({ column: { id, title, owner } }) => {\n//   const dispatch = useDispatch();\n//   const handlerEditColumn = (columnId, updatedData) => {\n//     dispatch(editColumn({ id: columnId, ...updatedData }));\n//   };\n//   const handlerDeleteColumn = columnId => {\n//     dispatch(deleteColumn(columnId));\n//   };\n\n//   // const dispatch = useDispatch();\n//   // const items = useSelector(selectColumns);\n//   // const columns = [];\n//   // const title = ' Column Title';\n\n//   return (\n//     <ColumnWrapper>\n//       <ColumnHeader>\n//         <ColumnTitle>{title}</ColumnTitle>\n//         <EditBlock>\n//           <EditButton type=\"button\" onClick={() => handlerEditColumn(id)}>\n//             <EditSVG>\n//               <use xlinkHref={`${sprite}#icon-pencil-01`} />\n//             </EditSVG>\n//           </EditButton>\n//           <EditButton type=\"button\" onClick={() => handlerDeleteColumn(id)}>\n//             <EditSVG>\n//               <use xlinkHref={`${sprite}#icon-trash-04`} />\n//             </EditSVG>\n//           </EditButton>\n//         </EditBlock>\n//       </ColumnHeader>\n//       {/* {columns.map(column =>\n//             <li key={column.id}> */}\n//       <CardList />\n//       {/* <button>ButtonAddAnotherCard</button>                  */}\n//       {/* </li>\n//           ) }   */}\n//     </ColumnWrapper>\n//   );\n\n};\n","import { AddColumnButton } from \"components/Button/AddColumnButton\";\nimport { ColumnListStyled, ColumnListWrapper } from \"./ColumnList.styled\";\n// import { AddColumnButton } from \"components/Button/AddColumnButton\";\nimport { ColumnListItem } from \"components/ColumnListItem/ColumnListItem\";\n\n\nexport const ColumnList = ({columns}) => {\n\n//   const {boardId} = useParams();\n\n//   const dispatch = useDispatch();\n//      useEffect(() => {\n      \n//     dispatch(getColumsById(boardId))\n      \n//     }, [boardId]);\n    // const columns = useSelector(selectColumns);//приходить масив колонок;\n    // const { boardId } = useParams(); // Отримуємо динамічний параметр з URL\n    // console.log(boardId);\n    \n    // const filteredColumns = columns.filter((column) => column.board === boardId);\n    // console.log(filteredColumns);\n  \n  \n    // const handlerEditColumn = (columnId, updatedData) => {\n    //   dispatch(editColumn({ id: columnId, ...updatedData }));\n    // };\n    // const handlerDeleteColumn = columnId => {\n    //   dispatch(deleteColumn(columnId));\n    // };\n    \n\n    return(\n        <ColumnListWrapper>\n        <ColumnListStyled>  \n           {columns.map(column => (\n            <li key={column._id} >\n                {/* <ColumnWrapper> */}\n                {/* <ColumnTitle>{column.title}</ColumnTitle> */}\n\n\n                {/* <CardList/> */}\n                <ColumnListItem column={column}/>\n                {/* </ColumnWrapper> */}\n            </li>\n\n           ))} \n                              \n           \n        </ColumnListStyled>\n        \n        <AddColumnButton/>\n            \n        </ColumnListWrapper>\n    )\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { HeaderDashboard } from 'components/HeaderDashboard/HeaderDashboard';\nimport { ScreensPageWrapper } from './ScreensPage.styled';\nimport { getBoardById } from 'redux/boards/operations';\n\nimport { selectAllBoards } from 'redux/boards/selectors';\nimport { ButtonText, Text } from './HomePage.styled';\nimport { selectColumns } from 'redux/columns/selectors';\n// import { AddColumnButton } from 'components/Button/AddColumnButton';\nimport { ColumnList } from 'components/ColumnList/ColumnList';\nimport { getAllColumns } from 'redux/columns/operations';\n// import DashBoard from 'components/DashBoard/DashBoard';\n\n\nexport default function ScreensPage() {\n  const dispatch = useDispatch();\n  const { boardId } = useParams();\n\n  useEffect(() => {\n    dispatch(getBoardById(boardId))\n    \n    \n  }, [boardId, dispatch]);\n\n  useEffect(() => {\n    dispatch(getAllColumns())\n  \n  }, [dispatch]);\n\n  const { t } = useTranslation('global');\n  const boards = useSelector(selectAllBoards);  \n  const columns = useSelector(selectColumns);//приходить масив колонок;\n  const filteredColumns = columns.filter((column) => column.board === boardId);\n    console.log(boards);\n    // console.log(filteredColumns);\n    \n  \n  return (    \n      <ScreensPageWrapper>\n        <HeaderDashboard />\n\n        {boards.length === 0 ? \n        (<Text>{t('screenPage.static.message1')}\n        <ButtonText>{t('screenPage.static.message2')}</ButtonText>\n        {t('screenPage.static.message3')}</Text> )\n        : <ColumnList columns={filteredColumns}/>  }\n\n        {/* {(boards.length === 0 && filteredColumns.length === 0) ? <ColumnList columns={filteredColumns}/> : <AddColumnButton/> } */}\n        {/* <DashBoard/> */}\n      </ScreensPageWrapper>\n    \n  );\n}\n","export const selectLoading = state => state.boards.isLoading\nexport const selectAllBoards = state => state.boards.boards\n// export const selectBoardById = state => state.boards."],"names":["HomeWrapper","styled","_templateObject","_taggedTemplateLiteral","Text","_templateObject2","ButtonText","_templateObject3","p","theme","violetColors","accentColor","HeaderWrapper","_templateObject4","FilterSVG","_templateObject5","_templateObject6","_templateObject7","_templateObject8","Field","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","Form","_templateObject16","_templateObject17","options","HeaderDashboard","dispatch","useDispatch","projectName","useSelector","state","project","filtersPriority","_useState","useState","_useState2","_slicedToArray","open","setOpen","handleClose","initialValues","label","_jsxs","style","position","children","_jsx","onClick","top","right","display","gap","background","border","xlinkHref","concat","sprite","Modal","isOpen","onRequestClose","content","width","heihght","left","bottom","marginRight","transform","backgroundColor","appElement","document","getElementById","padding","flexDirection","color","borderBottom","paddingBottom","margin","justifyContent","alignItems","showAll","Formik","map","el","idx","type","checked","value","includes","name","onChange","e","togglePriority","target","ScreensPageWrapper","violetFill","selectColumns","columns","ModalCloseButton","StyledSvgClose","props","colors","darkTextColor","AddColumnModal","_ref","onClose","submitButton","overlayClassName","className","closeTimeoutMS","ariaHideApp","stylesModal","height","maxHeight","maxWidth","EditColumnModal","ModalShowButton","white","radius","m","AddColumnTitle","AddColumnInput","shadowColor","AddColumnBtn","_ref$type","handlerClick","hoverViolet","IconWhiteWrap","IconVioletWrap","StyledSvgWhitePlus","StyledSvgDarkPlus","AddColumnButton","columnId","modalAddColumnIsOpen","setModalAddColumnIsOpen","_useState3","_useState4","modalEditColumnIsOpen","setModalEditColumnIsOpen","_useState5","_useState6","editColumnValue","setEditColumnValue","boardId","useParams","_Fragment","onSubmit","evt","preventDefault","inputValue","title","trim","newColumn","dashboardId","addColumn","console","log","placeholder","autoFocus","updatedTitle","elements","editColumn","id","_ref2","ColumnListWrapper","lightViolet","l","ColumnListStyled","spacing","ColumnWrapper","ColumnHeader","ColumnTitle","EditBlock","EditButton","EditSVG","greyIconColor","ColumnListItem","_ref$column","column","_id","ColumnList","ScreensPage","useEffect","getBoardById","getAllColumns","t","useTranslation","boards","selectAllBoards","filteredColumns","filter","board","length"],"sourceRoot":""}